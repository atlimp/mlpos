-- START FRESH? --
--DROP TABLE IF EXISTS PRODUCT CASCADE;
--DROP TABLE IF EXISTS CUSTOMER CASCADE;
--DROP TABLE IF EXISTS PAYMENTMETHOD;
--DROP TABLE IF EXISTS TRANSACTIONHEADER CASCADE;
--DROP TABLE IF EXISTS TRANSACTIONLINE;
CREATE OR REPLACE FUNCTION fn_update_date_updated()
    RETURNS TRIGGER AS $$
BEGIN
    NEW.date_updated = now();
RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TABLE IF NOT EXISTS PRODUCT(
    id SERIAL PRIMARY KEY,
    name varchar(100) DEFAULT '',
    description varchar(500) DEFAULT '',
    type int DEFAULT 0,
    image varchar(500) DEFAULT '',
    price decimal DEFAULT 0,
    date_inserted timestamp DEFAULT CURRENT_TIMESTAMP,
    date_updated timestamp DEFAULT CURRENT_TIMESTAMP
);


CREATE OR REPLACE TRIGGER t_PRODUCT_UPDATE BEFORE UPDATE ON PRODUCT FOR EACH ROW EXECUTE PROCEDURE fn_update_date_updated();


-- CUSTOMERS --


CREATE TABLE IF NOT EXISTS CUSTOMER(
    id SERIAL PRIMARY KEY,
    name varchar(100) DEFAULT '',
    email varchar(200) DEFAULT 0,
    image varchar(200) DEFAULT '',
    date_inserted timestamp DEFAULT CURRENT_TIMESTAMP,
    date_updated timestamp DEFAULT CURRENT_TIMESTAMP
);

CREATE OR REPLACE TRIGGER t_CUSTOMER_UPDATE BEFORE UPDATE ON CUSTOMER FOR EACH ROW EXECUTE PROCEDURE fn_update_date_updated();


-- PAYMENTMETHOD --

CREATE TABLE IF NOT EXISTS PAYMENTMETHOD(
     id SERIAL PRIMARY KEY,
     name varchar(100) DEFAULT '',
     description varchar(500) DEFAULT 0,
     image varchar(200) DEFAULT '',
     date_inserted timestamp DEFAULT CURRENT_TIMESTAMP,
     date_updated timestamp DEFAULT CURRENT_TIMESTAMP
);

CREATE OR REPLACE TRIGGER t_PAYMENTMETHOD_UPDATE BEFORE UPDATE ON PAYMENTMETHOD FOR EACH ROW EXECUTE PROCEDURE fn_update_date_updated();

-- TRANSACTIONHEADER --

CREATE TABLE IF NOT EXISTS TRANSACTIONHEADER(
     id SERIAL PRIMARY KEY,
     customer_id bigint REFERENCES CUSTOMER(id) NOT NULL,
     date_inserted timestamp DEFAULT CURRENT_TIMESTAMP,
     date_updated timestamp DEFAULT CURRENT_TIMESTAMP
);

CREATE OR REPLACE TRIGGER t_TRANSACTIONHEADER_UPDATE BEFORE UPDATE ON TRANSACTIONHEADER FOR EACH ROW EXECUTE PROCEDURE fn_update_date_updated();

-- TRANSACTIONHEADER --

CREATE TABLE IF NOT EXISTS TRANSACTIONLINE(
     id SERIAL,
     transaction_id bigint REFERENCES TRANSACTIONHEADER(id) ON DELETE CASCADE,
     product_id bigint REFERENCES PRODUCT(id),
     amount decimal,
     quantity decimal,
     date_inserted timestamp DEFAULT CURRENT_TIMESTAMP,
     date_updated timestamp DEFAULT CURRENT_TIMESTAMP,
     PRIMARY KEY (transaction_id, id)
);

CREATE OR REPLACE TRIGGER t_TRANSACTIONLINE_UPDATE BEFORE UPDATE ON TRANSACTIONLINE FOR EACH ROW EXECUTE PROCEDURE fn_update_date_updated();