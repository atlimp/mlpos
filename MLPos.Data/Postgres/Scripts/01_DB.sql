-- START FRESH? --
--DROP TABLE IF EXISTS PRODUCT CASCADE;
--DROP TABLE IF EXISTS CUSTOMER CASCADE;
--DROP TABLE IF EXISTS PAYMENTMETHOD CASCADE;
--DROP TABLE IF EXISTS POSCLIENT CASCADE;
--DROP TABLE IF EXISTS TRANSACTIONHEADER CASCADE;
--DROP TABLE IF EXISTS TRANSACTIONLINE;

CREATE OR REPLACE FUNCTION fn_update_date_updated()
    RETURNS TRIGGER AS $$
BEGIN
    NEW.date_updated = now();
RETURN NEW;
END;
$$ language 'plpgsql';

-- PRODUCTS --
CREATE TABLE IF NOT EXISTS PRODUCT(
    id SERIAL PRIMARY KEY,
    name varchar(100) DEFAULT '',
    description varchar(500) DEFAULT '',
    type int DEFAULT 0,
    image varchar(500) DEFAULT '',
    price decimal DEFAULT 0,
    date_inserted timestamp DEFAULT CURRENT_TIMESTAMP,
    date_updated timestamp DEFAULT CURRENT_TIMESTAMP
);


CREATE OR REPLACE TRIGGER t_PRODUCT_UPDATE BEFORE UPDATE ON PRODUCT FOR EACH ROW EXECUTE PROCEDURE fn_update_date_updated();


-- CUSTOMERS --
CREATE TABLE IF NOT EXISTS CUSTOMER(
    id SERIAL PRIMARY KEY,
    name varchar(100) DEFAULT '',
    email varchar(200) DEFAULT '',
    image varchar(200) DEFAULT '',
    date_inserted timestamp DEFAULT CURRENT_TIMESTAMP,
    date_updated timestamp DEFAULT CURRENT_TIMESTAMP
);

CREATE OR REPLACE TRIGGER t_CUSTOMER_UPDATE BEFORE UPDATE ON CUSTOMER FOR EACH ROW EXECUTE PROCEDURE fn_update_date_updated();


-- PAYMENTMETHODS --
CREATE TABLE IF NOT EXISTS PAYMENTMETHOD(
     id SERIAL PRIMARY KEY,
     name varchar(100) DEFAULT '',
     description varchar(500) DEFAULT '',
     image varchar(200) DEFAULT '',
     date_inserted timestamp DEFAULT CURRENT_TIMESTAMP,
     date_updated timestamp DEFAULT CURRENT_TIMESTAMP
);

CREATE OR REPLACE TRIGGER t_PAYMENTMETHOD_UPDATE BEFORE UPDATE ON PAYMENTMETHOD FOR EACH ROW EXECUTE PROCEDURE fn_update_date_updated();


-- POSCLIENT --
CREATE TABLE IF NOT EXISTS POSCLIENT(
    id SERIAL PRIMARY KEY,
    name varchar(100) DEFAULT '',
    description varchar(500) DEFAULT '',
    date_inserted timestamp DEFAULT CURRENT_TIMESTAMP,
    date_updated timestamp DEFAULT CURRENT_TIMESTAMP
);

CREATE OR REPLACE TRIGGER t_POSCLIENT_UPDATE BEFORE UPDATE ON POSCLIENT FOR EACH ROW EXECUTE PROCEDURE fn_update_date_updated();


-- TRANSACTIONHEADER --
CREATE TABLE IF NOT EXISTS TRANSACTIONHEADER(
     id SERIAL,
     posclient_id bigint REFERENCES POSCLIENT(id) NOT NULL,
     customer_id bigint REFERENCES CUSTOMER(id) NOT NULL,
     date_inserted timestamp DEFAULT CURRENT_TIMESTAMP,
     date_updated timestamp DEFAULT CURRENT_TIMESTAMP,
     PRIMARY KEY (id, posclient_id)
);

CREATE OR REPLACE TRIGGER t_TRANSACTIONHEADER_UPDATE BEFORE UPDATE ON TRANSACTIONHEADER FOR EACH ROW EXECUTE PROCEDURE fn_update_date_updated();


-- TRANSACTIONLINE --
CREATE TABLE IF NOT EXISTS TRANSACTIONLINE(
     id SERIAL,
     transaction_id bigint,
     posclient_id bigint REFERENCES POSCLIENT(id) NOT NULL,
     product_id bigint REFERENCES PRODUCT(id) NOT NULL,
     amount decimal,
     quantity decimal,
     date_inserted timestamp DEFAULT CURRENT_TIMESTAMP,
     date_updated timestamp DEFAULT CURRENT_TIMESTAMP,
	 FOREIGN KEY(transaction_id, posclient_id) REFERENCES TRANSACTIONHEADER(id, posclient_id) ON DELETE CASCADE,
     PRIMARY KEY (transaction_id, posclient_id, id)
);

CREATE OR REPLACE TRIGGER t_TRANSACTIONLINE_UPDATE BEFORE UPDATE ON TRANSACTIONLINE FOR EACH ROW EXECUTE PROCEDURE fn_update_date_updated();


-- POSTEDTRANSACTIONHEADER --
CREATE TABLE IF NOT EXISTS POSTEDTRANSACTIONHEADER(
     id bigint NOT NULL,
     posclient_id bigint REFERENCES POSCLIENT(id) NOT NULL,
     customer_id bigint REFERENCES CUSTOMER(id) NOT NULL,
     paymentmethod_id bigint REFERENCES PAYMENTMETHOD(id),
     date_inserted timestamp DEFAULT CURRENT_TIMESTAMP,
     date_updated timestamp DEFAULT CURRENT_TIMESTAMP,
     PRIMARY KEY (id, posclient_id)
);

CREATE OR REPLACE TRIGGER t_POSTEDTRANSACTIONHEADER_UPDATE BEFORE UPDATE ON POSTEDTRANSACTIONHEADER FOR EACH ROW EXECUTE PROCEDURE fn_update_date_updated();


-- POSTEDTRANSACTIONLINE --
CREATE TABLE IF NOT EXISTS POSTEDTRANSACTIONLINE(
     id SERIAL,
     transaction_id bigint,
     posclient_id bigint REFERENCES POSCLIENT(id) NOT NULL,
     product_id bigint REFERENCES PRODUCT(id),
     amount decimal,
     quantity decimal,
     date_inserted timestamp DEFAULT CURRENT_TIMESTAMP,
     date_updated timestamp DEFAULT CURRENT_TIMESTAMP,
	 FOREIGN KEY(transaction_id, posclient_id) REFERENCES POSTEDTRANSACTIONHEADER(id, posclient_id) ON DELETE CASCADE,
     PRIMARY KEY (transaction_id, posclient_id, id)
);

CREATE OR REPLACE TRIGGER t_POSTEDTRANSACTIONLINE_UPDATE BEFORE UPDATE ON POSTEDTRANSACTIONLINE FOR EACH ROW EXECUTE PROCEDURE fn_update_date_updated();